#---	class AXIOMtoJSON.py

import uuid
import os
import re

class AXIOMtoJSON:
	'''
	Represents all attributes and methods to represent Traces in CASE ontology, starting from data
	extracted from XML reports generated by UFED-PA forensic tool
	'''
	C_TAB = '\t'
# default value for string value not provided
#
	C_NP = ''  				

# default value for integer value not provided
#
	C_INT = '0'				

# default value for date value not provided
#
	C_DATE = '1900-01-01T08:00:00+0'				

# default value for Hash Method value not provided
#
	C_HASH_M = 'MD5' 	

# default value for Hash Method value not provided
#
	C_HASH_V = '1' * 76 	

# default value for the property referrerUrl of the URLHistoryFacet class
#
	C_REF_URL = 'http:www.empty.com/referrer_url'

# default value for the location where a forensic action was carried out
#
	C_LOCATION = 'Unknown location'

	def __init__(self, fileOut, commaLine):
	# to be defined
		self.FileOut = fileOut
		self.commaLine = commaLine
		self.phoneNumberList = []
		self.phoneNameList = []
		self.phoneUuidList = []
		
		self.appNameList = []
		self.appAccountUsernameList = []
		self.appAccountNameList = []
		self.appIDList = []

		self.CHATparticipantsNameList = []
		self.CHATparticipantsIdList = []
		self.CHATaccountIdList = []
		self.CHATthread = []

		self.EMAILaccountIdList = []
		self.EMAILaddressList = []
		self.phoneOwnerNumber = ''
		self.phoneOwnerUuid = ''
		self.FILEuuid = {}
		self.FILEid = []

		self.EXTRA_INFOdictPath = {}
		self.EXTRA_INFOdictSize = {}
		self.EXTRA_INFOdictTableName = {}
		self.EXTRA_INFOdictOffset = {}
		self.EXTRA_INFOdictNodeInfoId = {}

		self.CHATids = []
		self.CHATsenders = []
		self.CHATreceivers = []
		self.CHATdateTimeSents = []
		self.CHATdateTimeReceiveds = []
		self.CHATmessages = []
		self.CHATmessageStatuses = []
		self.CHATsources = []
		self.CHATlocations = []
		self.CHATrecoveryMethods = []
		self.CHATapplications = []

		self.UrlList = []
		self.UrlIDList = []

		self.LocationList = []
		self.LocationIDList = []


		
	# static methods do not receive class or instance arguments
	# and usually operate on data that is not instance or class-specific
	@staticmethod
	def __createUUID():
		'''	
		Traces in CASE have a unique identification number, based on Globally Unique Identifier.  
		Each time a Trace is generated this static method in invoked, it doen't depends on any object
		'''
		return str(uuid.uuid4())

	def __cleanString(self, str):
		newStr = str.replace('"', "'")

#--- �=REPLACEMENT CHARACTER, sequence Hex UTF-8 bytes:	EF BF BD
#		
		newStr = newStr.replace('�', '')
		newStr = newStr.replace(chr(10), ' ')
		newStr = newStr.replace(chr(9), ' ')
		newStr = newStr.replace('\\', "/")
		return newStr

	def fillArrayWithEmpty(self, aInput, max):
		if len(aInput) < max:
			for i in range(len(aInput), max):						
				aInput.append('EMPTY')

	def fillChatThread(self, chatThread, CHATid, CHATsender, CHATreceiver,
		CHATdateTimeSent, CHATdateTimeReceived, CHATmessage, CHATmessageStatus,
		CHATapplication, CHATsource, CHATlocation, CHATrecoveryMethod, CALLphoneNumber):

		for i in range(len(CHATsender)):
			#print('sender[' + str(i) + ']=' + CHATsender[i])
			if CHATsender[i].lower().find('local user') > -1:
				CHATsender[i] = CALLphoneNumber
			
			#print('receiver[' + str(i) + ']=' + CHATreceiver[i])

			if CHATreceiver[i].lower().find('local user') > -1:
				CHATreceiver[i] = CALLphoneNumber
			
			chatFound = False
			idx = -1
			for j in range(len(chatThread)):
				if (CHATsender[i] in chatThread[j] and  
					  CHATreceiver[i] in chatThread[j] and 
					  CHATapplication[i] in chatThread[j]):
					idx = j
					chatFound = True
					break
			
			if chatFound:		
				self.CHATids[idx].append(CHATid[i])
				self.CHATsenders[idx].append(CHATsender[i])
				self.CHATreceivers[idx].append(CHATreceiver[i])
				self.CHATdateTimeSents[idx].append(CHATdateTimeSent[i])
				self.CHATdateTimeReceiveds[idx].append(CHATdateTimeReceived[i])
				self.CHATmessages[idx].append(CHATmessage[i])
				self.CHATmessageStatuses[idx].append(CHATmessageStatus[i])
				self.CHATsources[idx].append(CHATsource[i])
				self.CHATlocations[idx].append(CHATlocation[i])
				self.CHATrecoveryMethods[idx].append(CHATrecoveryMethod[i])
				self.CHATapplications[idx].append(CHATapplication[i])
			else:
				idx = len(chatThread) - 1
				#print('chatThread: ' + str(idx))
				self.CHATids.append([CHATid[i]])
				self.CHATsenders.append([CHATsender[i]])
				self.CHATreceivers.append([CHATreceiver[i]])
				self.CHATdateTimeSents.append([CHATdateTimeSent[i]])
				self.CHATdateTimeReceiveds.append([CHATdateTimeReceived[i]])
				self.CHATmessages.append([CHATmessage[i]])
				self.CHATmessageStatuses.append([CHATmessageStatus[i]])
				self.CHATsources.append([CHATsource[i]])
				self.CHATlocations.append([CHATlocation[i]])
				self.CHATrecoveryMethods.append([CHATrecoveryMethod[i]])
				self.CHATapplications.append([CHATapplication[i]])
				chatThread.append(CHATsender[i] + '#' + CHATreceiver[i] + '#' + CHATapplication[i])
		# print("chatThread:")
		# print(chatThread)

	def ___generateContextAxiom(self, ufedVersion, deviceExtractionStartTime, 
		deviceAcquisitionStartTime, deviceAcquisitionEndTime, examinerName, 
		deviceBluetoothAddress, deviceId, devicePhoneModel, 
		deviceOsType, deviceOsVersion, devicePhoneVendor, 
		deviceMacAddress, deviceIccid, deviceImsi, deviceImei, 
		imagePath, imageSize, imageMetadataHashSHA, imageMetadataHashMD5):

		# generate Trace/Tool for the Acquisition and Extraction Actions
		idTool = self.__generateTraceTool('AXIOM Process', 'Acquisition', 
			'MAGNET', ufedVersion, []);
		
		# generate Trace/Identity for the Performer, D.F. Expert, of the Actions
		idIdentity = self.__generateTraceIdentity(examinerName, '', '')
		
		# generate Trace/Role for the Performer, D.F. Expert, of the Actions
		idRole = self.__generateTraceRole('Digital Forensic Expert')
		
		# generate Trace/Relation between the above Role and the Identity traces
		self.__generateTraceRelation(idIdentity, idRole, 'has_role', '', '');

		# generate Trace/Device for the mobile phone
		idDevice = self.generateTraceDevice(deviceMacAddress, deviceId, devicePhoneModel,
			deviceOsType, deviceOsVersion, devicePhoneVendor, '',
			deviceIccid, deviceImsi, deviceImei, deviceBluetoothAddress)
		
		# generate Trace/Provenance_Record for the mobile device
		idDeviceList = []
		idDeviceList.append(idDevice)
		idProvenanceDevice = self.__generateTraceProvencance(idDeviceList, 'Mobile device', 
			AXIOMtoJSON.C_NP, deviceAcquisitionStartTime) 
		
		# generate Trace/File for each file extracted by the Acuisition action
		# idFileList contains the uuid of these files and it is used for
		# creating the Provenance_Record of the Result/Output of the Acquisition 
		# action
		idFilesAcquisition = []
		for i in range(len(imagePath)):
			if imageMetadataHashSHA[i].strip() == '':
				idFileAcquisition = self.__generateTraceFile(imagePath[i], 
				imageSize[i], 'MD5', imageMetadataHashMD5[i], AXIOMtoJSON.C_NP, 
				AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP,
				AXIOMtoJSON.C_NP)  				 				
			else:
				idFileAcquisition = self.__generateTraceFile(imagePath[i], 
				imageSize[i], 'SHA256', imageMetadataHashSHA[i], AXIOMtoJSON.C_NP, 
				AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP,
				AXIOMtoJSON.C_NP) 				
			
			idFilesAcquisition.append(idFileAcquisition)  	
		

		idProvenanceAcquisitionFiles = \
			self.__generateTraceProvencance(idFilesAcquisition, 
        	'Acquisition files', AXIOMtoJSON.C_NP, deviceAcquisitionStartTime)

		idProvenanceAcquisitionFilesList = []
		idProvenanceAcquisitionFilesList.append(idProvenanceAcquisitionFiles)
        
		idProvencanceAcquisitionAction = \
		self.__generateTraceInvestigativeAction('acquisition', 
			'Forensic mobile device acquisition', deviceAcquisitionStartTime, 
			deviceAcquisitionEndTime, idTool, AXIOMtoJSON.C_NP, 
			idIdentity, idProvenanceDevice, idProvenanceAcquisitionFilesList, ',');

		idFilesExtraction = []
		for uuidFile in self.FILEuuid.values(): 
			idFilesExtraction.append(uuidFile)

		idProvenanceExtractionFiles = \
		self.__generateTraceProvencance(idFilesExtraction, 'Extraction',
			AXIOMtoJSON.C_NP, deviceExtractionStartTime);
        
		idProvenanceExtractionFilesList = []
		idProvenanceExtractionFilesList.append(idProvenanceExtractionFiles)
		self.__generateTraceInvestigativeAction('extraction', 
			'Forensic mobile device extraction', deviceExtractionStartTime,
			AXIOMtoJSON.C_NP, idTool, AXIOMtoJSON.C_NP, idIdentity,
			idProvenanceAcquisitionFiles, idProvenanceExtractionFilesList, '');

	def __generateChainOfEvidence(self, source, location, uuidTrace):
		filePath = ''

		charSeparator = '/'
		separator = source.find(charSeparator)
		if separator > - 1:
			filePath = source[separator:]
		else:
			charSeparator = '\\'
			separator = source.find(charSeparator)
			if separator > - 1: 
				filePath = source[separator:]
			else:
				filePath = source
				fileName = source
				fileExt = ''
			

		if separator > - 1:
			fileName = filePath.split(charSeparator)[-1]
			fileExt = fileName[fileName.rfind('.') + 1:]

		openPar = source.find('(')
		closePar = source.find(')')
		fileSysType = source[openPar + 1: closePar]
		
		filePath = self.__cleanString(filePath)
		location = self.__cleanString(location)

		uuidFile = self.__generateTraceFileCoE(filePath, fileName, fileExt, fileSysType,
			location)

		self.FILEuuid[uuidTrace] = uuidFile
		self.__generateTraceRelation(uuidTrace, uuidFile, 'Contained_Within', 
				location, '00001');

	def __generateLastLine(self):
		line = AXIOMtoJSON.C_TAB + '] \n }'
		self.FileOut.write(line)

	def __generateTraceAppAccount(self, source, name, identifier, idApp, idIdentity):
		uuid = "kb:" + AXIOMtoJSON.__createUUID()


		name = self.__cleanString(name)
		identifier = self.__cleanString(identifier)

		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n', \
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n', \
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[ \n', \
			AXIOMtoJSON.C_TAB*2 + '{ \n', \
			AXIOMtoJSON.C_TAB*3 + '"@type":"uco-observable:AccountFacet", \n', \
		# CASE 0.4 indicates a id reference to an Object that contains only the name of the App!
		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:accountIssuer":"' + idIdentity + '", \n'
			AXIOMtoJSON.C_TAB*3 + '"uco-observable:accountIdentifier":"' + identifier + '", \n' , \
			AXIOMtoJSON.C_TAB*3 + '"uco-observable:isActive":true \n', \
			AXIOMtoJSON.C_TAB*2 + '}, \n', \
			AXIOMtoJSON.C_TAB*2 + '{ \n', \
			AXIOMtoJSON.C_TAB*3 + '"@type":"uco-observable:ApplicationAccountFacet", \n' , \
			AXIOMtoJSON.C_TAB*3 + '"uco-observable:application":\n', \
			AXIOMtoJSON.C_TAB*4 + '{\n', \
			AXIOMtoJSON.C_TAB*5 + '"@id":"' + idApp + '"\n', \
			AXIOMtoJSON.C_TAB*4 + '}\n', \
			AXIOMtoJSON.C_TAB*2 + '},\n', \
			AXIOMtoJSON.C_TAB*2 + '{ \n', \
			AXIOMtoJSON.C_TAB*3 + '"@type":"uco-observable:DigitalAccountFacet", \n', \
			AXIOMtoJSON.C_TAB*3 + '"uco-observable:displayName":"' + name + '"\n', \
			AXIOMtoJSON.C_TAB*2 + '}\n', \
			AXIOMtoJSON.C_TAB + ']\n', \
			'}, \n'])
		self.FileOut.write(line);
		return uuid
	
	def __generateTraceAppName(self, appName):
		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n', \
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n', \
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
		# aligned wit CASE version 0.4
		#line += AXIOMtoJSON.C_TAB + '"uco-core:name":"' + appName + '",\n'
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[ \n', \
			AXIOMtoJSON.C_TAB*2 + '{ \n', \
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:ApplicationFacet", \n', \
#	CASE 0.2/UCO 0.4 compliant, no uco-observable:out property in Observable
#		
		#line += AXIOMtoJSON.C_TAB*2 + '"uco-core:proposed:appName": "' + appName + '"\n'
			AXIOMtoJSON.C_TAB*2 + '"uco-core:name": "' + appName + '"\n', \
			AXIOMtoJSON.C_TAB*2 + '}\n', \
			AXIOMtoJSON.C_TAB + ']\n', \
			'}'])
				
		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True
		
		self.FileOut.write(line);
		return uuid

	def __generateTraceAppIdentity(self, appName):
		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n', \
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:IdentityFacet", \n', \
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[ \n', \
			AXIOMtoJSON.C_TAB*2 + '{ \n', \
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:OrganizationFacet", \n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:orgName":"' + appName + '" \n', \
			AXIOMtoJSON.C_TAB*2 + '}\n', \
			AXIOMtoJSON.C_TAB + ']\n', \
			'},\n'])
		self.FileOut.write(line);
		return uuid
		

	def __generateTraceChatAccount(self, issuer, partyId, partyName, idApp):
		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		
		partyId = self.__cleanString(partyId)
		partyName = self.__cleanString(partyName)

		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n', \
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n', \
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[\n', \
			AXIOMtoJSON.C_TAB*2 + '{\n', \
			AXIOMtoJSON.C_TAB*3 + '"@type":"uco-observable:AccountFacet", \n', \
		# CASE 0.4 indicates a id reference to an Object that contains only the name of the App!
		#line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:accountIssuer": "' + issuer + '",\n'		
		# in CASE 0.4 applicationIdentifier --> accountIdentifier
		#line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:applicationIdentifier": "' + partyId + '",\n' 
			AXIOMtoJSON.C_TAB*3 + '"uco-observable:accountIdentifier": "' + partyId + '",\n', \
			AXIOMtoJSON.C_TAB*3 + '"uco-observable:isActive":true\n', \
			AXIOMtoJSON.C_TAB*2 + '},\n', \
			AXIOMtoJSON.C_TAB*2 + '{\n', \
			AXIOMtoJSON.C_TAB*3 + '"@type":"uco-observable:ApplicationAccountFacet",\n', \
			AXIOMtoJSON.C_TAB*3 + '"uco-observable:application":\n', \
			AXIOMtoJSON.C_TAB*4 + '{\n', \
			AXIOMtoJSON.C_TAB*5 + '"@id":"' + idApp + '"\n', \
			AXIOMtoJSON.C_TAB*4  + '}\n', \
			AXIOMtoJSON.C_TAB*2 + '},\n', \
			AXIOMtoJSON.C_TAB*2 + '{\n', \
			AXIOMtoJSON.C_TAB*3 + '"@type":"uco-observable:DigitalAccountFacet",\n', \
			AXIOMtoJSON.C_TAB*3 + '"uco-observable:displayName":"' + partyName + '"\n', \
			AXIOMtoJSON.C_TAB*2 + '}\n', \
			AXIOMtoJSON.C_TAB + '] \n', \
			'}'])
		
		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True

		self.FileOut.write(line)
		return uuid

	def __generateTraceChat(self, body, idApplication, timeStamp, idFrom,
		idToList, status, outcome, direction, attachmentNames, 
		attachmentUrls):
				
		TOlist = '{"@id":"' + idToList + '"}'
		
		body = self.__cleanString(body)
		TOlist = TOlist.replace('\t', ' ')

		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n', \
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n', \
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[\n', \
			AXIOMtoJSON.C_TAB*2 + '{\n', \
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:MessageFacet", \n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:messageText":"' + body + '",\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:application":\n', \
			AXIOMtoJSON.C_TAB*3 + '{\n', \
			AXIOMtoJSON.C_TAB*3 + '"@id":"' + idApplication + '"\n', \
			AXIOMtoJSON.C_TAB*3 + '},\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:sentTime":\n', \
			AXIOMtoJSON.C_TAB*3 + '{\n', \
			AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:dateTime",\n', \
			AXIOMtoJSON.C_TAB*3 + '"@value":"' + timeStamp + '"\n', \
			AXIOMtoJSON.C_TAB*3 + '},\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:from":{\n', \
			AXIOMtoJSON.C_TAB*3 + '"@id":"' + idFrom + '"\n', \
			AXIOMtoJSON.C_TAB*2 + '},\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:to":[\n', \
			AXIOMtoJSON.C_TAB*3 + TOlist + '],\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:allocationStatus":"' + status + '",\n', \
#	CASE 0.2/UCO 0.4 compliant, no uco-observable:out property in Observable
#
		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:drafting:outcome":"' + outcome + '",\n'
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:messageType":"' + direction + '"\n', \
			AXIOMtoJSON.C_TAB*2 + '}\n', \
			AXIOMtoJSON.C_TAB + ']\n', \
			'}\n'])

		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True

		self.FileOut.write(line)
		
		#each Message, within a specific Chat can have more than one attachment,
		# both the Filenames and the Urls of the Attachment are separated by
		# a triple hash tag # 
		listFileNames = attachmentNames.split('###');
		listFileUrls = attachmentUrls.split('###');
		nName = len(listFileNames)
		nUrl = len(listFileUrls)
		if nName > nUrl:
			for i in range(nName - nUrl):
				listFileUrls.append('')
		if nName < nUrl:
			for i in range(nUrl - nName):
				listFileNames.append('')


		for i in range(len(listFileNames)):
			if (listFileNames[i].strip() == '') and \
			 	(listFileUrls[i].strip() == ''):
				pass
			else:
				# listFileUrls[i] will be stored in the property
				# path of the FILE trace
				fileUuid = self.__generateTraceFile(listFileNames[i], 
				AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP,
				AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP, listFileUrls[i],
				AXIOMtoJSON.C_NP)
				
				self.__generateTraceRelation(fileUuid, uuid, 'Connected_To', 
				AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP)
		return uuid


	def generateTraceDevice(self, deviceMAC, deviceSN, deviceModel,
		deviceOS, deviceOSVersion, deviceManufacturer, deviceWiFi, deviceICCID,
		deviceIMSI, deviceIMEI, deviceBluetoothAddress):

		deviceModel = self.__cleanString(deviceModel)
		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n', \
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject",\n', \
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[\n', \
			AXIOMtoJSON.C_TAB*2 + '{\n', \
			AXIOMtoJSON.C_TAB*3 + '"@type":"uco-observable:DeviceFacet",\n', \
			#AXIOMtoJSON.C_TAB*3 + '"uco-observable:model":"' + deviceModel + '",\n', \
			AXIOMtoJSON.C_TAB*3 + '"uco-observable:serialNumber":"' + deviceSN + '",\n', \
			AXIOMtoJSON.C_TAB*3 + '"uco-core:name":"' + deviceModel + '"\n', \
			AXIOMtoJSON.C_TAB*2 + '}\n', \
			
			#AXIOMtoJSON.C_TAB*2 + '{\n', \
			#AXIOMtoJSON.C_TAB*3 + '"@type":"uco-observable:MobileDeviceFacet",\n', \
			#AXIOMtoJSON.C_TAB*3 + '"uco-observable:IMEI":"' + deviceIMEI + '"\n', \
		
#	if properties are not provided, the related line is not written
#
		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:bluetoothDeviceName":"NOT_PROVIDED",\n'
		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:mockLocationsAllowed":"NOT_PROVIDED",\n'		
		#	line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:phoneActivationTime":\n'
		#line += AXIOMtoJSON.C_TAB*3 + '{\n'
		#line += AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:dateTime",\n'
		#line += AXIOMtoJSON.C_TAB*3 + '"@value":"NOT_PROVIDED"\n'
		#line += AXIOMtoJSON.C_TAB*3 + '},\n'
		
		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:storageCapacityInBytes":{\n'
		#line += AXIOMtoJSON.C_TAB*3 + '"@type": "xsd:long",\n'
		#line += AXIOMtoJSON.C_TAB*3 + '"@value": "NOT_PROVIDED"\n'
		#line += AXIOMtoJSON.C_TAB*2 + '},\n'

		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:clockSetting":"NOT_PROVIDED"\n'
			#AXIOMtoJSON.C_TAB*2 + '},\n' , \
			#AXIOMtoJSON.C_TAB*2 + '{\n', \
			#AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:OperatingSystemFacet",\n', \
			#AXIOMtoJSON.C_TAB*2 + '"uco-observable:name": "' + deviceOS + '",\n', \
			#AXIOMtoJSON.C_TAB*2 + '"uco-observable:manufacturer":"' + deviceManufacturer + '",\n', \
			#AXIOMtoJSON.C_TAB*2 + '"uco-observable:version":"' + deviceOSVersion + '"\n', \
			#AXIOMtoJSON.C_TAB*2 + '},\n', \
#	CASE 0.2/UCO 0.4 compliant, nither observable:AndroidDevice nor observable:AppleDevice are
#	classes of the observable.ttl ontology
#
		#line += AXIOMtoJSON.C_TAB*2 + '{\n'		
		#if deviceOS.lower() == 'android':
		#	line += AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:AndroidDevice",\n'
		#	line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:androidID": "NOT_PROVIDED",\n'
		#	line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:androidSerialNumber": "' + deviceSN + '",\n'
		#else:
		#	line += AXIOMtoJSON.C_TAB*2 + '"@type":"AppleDevice",\n'
		#	line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:AppleDeviceID": "NOT_PROVIDED",\n'
		#	line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:AppleDevideSerialNumber": "' + deviceSN + '",\n'

		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:screenUnlockPattern":"NOT_PROVIDED"\n'
		#line += AXIOMtoJSON.C_TAB*2 + '},\n'
			#AXIOMtoJSON.C_TAB*2 + '{\n', \
			#AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:BluetoothAddressFacet",\n', \
			#AXIOMtoJSON.C_TAB*2 + '"uco-observable:addressValue":"' + deviceBluetoothAddress + '"\n', \
			#AXIOMtoJSON.C_TAB*2 + '},\n ', \
			#AXIOMtoJSON.C_TAB*2 + '{\n', \
			#AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:WifiAddressFacet",\n', \
			#AXIOMtoJSON.C_TAB*2 + '"uco-observable:addressValue":"' + deviceWiFi + '"}\n', \
		
		#line += AXIOMtoJSON.C_TAB*2 + '{\n'
		#line += AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:MobileAccount",\n '
		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:MSISDN":"NOT_PROVIDED"\n'
		#line += AXIOMtoJSON.C_TAB*2 + '}\n'
			AXIOMtoJSON.C_TAB + ']\n', \
			'}'])

		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True

		self.FileOut.write(line)
		return uuid
	
	def __generateTraceEmail(self, EMAILid, EMAILstatus, EMAILsource, EMAILlocation,
		EMAILidentifierFROM, EMAILidentifiersTO, EMAILidentifiersCC, 
		EMAILidentifiersBCC, EMAILbody, EMAILsubject, EMAILtimeStamp, 
		EMAILattachmentsFilename):

		if EMAILidentifierFROM.strip() in self.EMAILaddressList:
			idx = self.EMAILaddressList.index(EMAILidentifierFROM.strip())
			idFROM = self.EMAILaccountIdList[idx]
		else:
			self.EMAILaddressList.append(EMAILidentifierFROM.strip())
			uuidEmail = self.__generateTraceEmailAccount(EMAILidentifierFROM.strip())
			self.EMAILaccountIdList.append(uuidEmail)
			idFROM = uuidEmail
		
		itemsTO = ''

#---	addresses in the TO field, are separated with comma
#
		EMAILtoList = EMAILidentifiersTO.split(',')
		for i in range(len(EMAILtoList)):
			if EMAILtoList[i].strip() == '':
				pass
			else:
				if EMAILtoList[i].strip() in self.EMAILaddressList:
					idx = self.EMAILaddressList.index(EMAILtoList[i].strip())
					idTO = '{"@id":"' + self.EMAILaccountIdList[idx] + '"}'
				else:
					self.EMAILaddressList.append(EMAILtoList[i].strip())
					uuidEmail = self.__generateTraceEmailAccount(EMAILtoList[i].strip())
					self.EMAILaccountIdList.append(uuidEmail)
					idTO = '{"@id":"' + uuidEmail + '"}'
				itemsTO += itemsTO + idTO + ','
		
		# get rid of the last comma
		itemsTO = itemsTO[0:-1]

		itemsCC = ''
		for i in range(len(EMAILidentifiersCC)):
			if EMAILidentifiersCC[i].strip() == '':
				pass
			else:
				if EMAILidentifiersCC[i].strip() in self.EMAILaddressList:
					idx = self.EMAILaddressList.index(EMAILidentifiersCC[i].strip())
					idCC = '{"@id":"' + self.EMAILaccountIdList[idx] + '"}'
				else:
					self.EMAILaddressList.append(EMAILidentifiersCC[i].strip())
					uuidEmail = self.__generateTraceEmailAccount(EMAILidentifiersCC[i].strip())
					self.EMAILaccountIdList.append(uuidEmail)
					idCC = '{"@id":"' + uuidEmail + '"}'
				itemsCC += itemsCC + idCC + ','

		# get rid of the last comma
		itemsCC = itemsCC[0:-1]

#	CASE 0.2/UCO 0.4 compliant, the right property is bcc
#		
		
		itemsBCC = ''
		for i in range(len(EMAILidentifiersBCC)):
			if EMAILidentifiersBCC[i].strip() == '':
				pass
			else:
				if EMAILidentifiersBCC[i].strip() in self.EMAILaddressList:
					idx = self.EMAILaddressList.index(EMAILidentifiersBCC[i].strip())
					idBCC = '{"@id":"' + self.EMAILaccountIdList[idx] + '"}'
				else:
					self.EMAILaddressList.append(EMAILidentifiersBCC[i].strip())
					uuidEmail = self.__generateTraceEmailAccount(EMAILidentifiersBCC[i].strip())
					self.EMAILaccountIdList.append(uuidEmail)
					idBCC = '{"@id":"' + uuidEmail + '"}'
				itemsBCC += itemsBCC + idBCC + ','

#--	get rid of the last comma
#				
		itemsBCC = itemsBCC[0:-1]

		body = self.__cleanString(EMAILbody)

		subject = self.__cleanString(EMAILsubject)
#--- Replace all characters different from number, space or character with nothing
#		
		subject = re.sub('[^0-9A-Za-z ]','', subject)


#---	the xsd:dateTime has the structure YYYY-MM-DDTHH:MM:SS (UTCxxx
#			the character "/" is not allowed
#		
		EMAILtimeStamp = EMAILtimeStamp.replace("/", "-")	
		EMAILtimeStamp = EMAILtimeStamp.replace(' ', 'T', 1)
		EMAILtimeStamp = EMAILtimeStamp.replace('UTC', '')	

		uuid = "kb:" + AXIOMtoJSON.__createUUID()

		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n', \
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject",\n', \
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[\n', \
			AXIOMtoJSON.C_TAB*2 + '{\n', \
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:EmailMessageFacet",\n', \
#	CASE 0.2/UCO 0.4 compliant, it would be necessary to create a idref to the application
#
		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:application":"' + EMAILsource + '",\n'
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:sentTime":\n', \
			AXIOMtoJSON.C_TAB*3 + '{\n', \
			AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:dateTime",\n', \
			AXIOMtoJSON.C_TAB*3 + '"@value":"' + EMAILtimeStamp + '"\n', \
			AXIOMtoJSON.C_TAB*3 + '},\n', \

#	CASE 0.2/UCO 0.4 compliant, the right property is from
#			
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:isMimeEncoded":false,\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:isMultipart":false,\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:from":{\n', \
			AXIOMtoJSON.C_TAB*3 + '"@id":"' + idFROM + '"\n', \
			AXIOMtoJSON.C_TAB*2 + '},\n', \
#	CASE 0.2/UCO 0.4 compliant, the right property is to
#		
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:to":[', \
			itemsTO + '],\n', \
#	CASE 0.2/UCO 0.4 compliant, the right property is cc
#		
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:cc":[', \
			itemsCC + '],\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:bcc":[', \
			itemsBCC + '],\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:body":"' + body + '",\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:subject":"' + subject + '",\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:allocationStatus":"' + EMAILstatus + '"\n', \
			AXIOMtoJSON.C_TAB*2 + '} \n', \
			AXIOMtoJSON.C_TAB + '] \n', \
			'}'])
		
		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True

		self.FileOut.write(line);
		self.__generateChainOfEvidence(EMAILsource, EMAILlocation, uuid)		

		for i in range(len(EMAILattachmentsFilename)):
			if EMAILattachmentsFilename[i].strip() == '':
				pass
			else:
				fileUuid = self.__generateTraceFile(EMAILattachmentsFilename[i], 
				AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP,
  				AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP,
  				AXIOMtoJSON.C_NP)
				self.__generateTraceRelation(fileUuid, uuid, 'Attached_To', 
				AXIOMtoJSON.C_NP, AXIOMtoJSON.C_NP)
		return uuid

	def __generateTraceEmailAccount(self, address):
		
		uuidAddress = self.__generateTraceEmailAddress(address)

		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n', \
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n', \
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[{\n', \
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:AccountFacet", \n', \

#	CASE 0.2/UCO 0.4 compliant, there is no property accountIssuer
#		
		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:accountIssuer": "' + \
		#	AXIOMtoJSON.C_NP + '",\n'
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:isActive":true,\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:accountIdentifier":" "\n', \
			AXIOMtoJSON.C_TAB*2 + '},\n', \
			AXIOMtoJSON.C_TAB*2 + '{\n', \
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:EmailAccountFacet",\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:emailAddress":\n', \
			AXIOMtoJSON.C_TAB*3 + '{"@id":"' + uuidAddress + '"}\n', \
			AXIOMtoJSON.C_TAB*2 + '}\n', \
			AXIOMtoJSON.C_TAB + '] \n', \
			'}'])
		
		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True

		self.FileOut.write(line)
		return uuid

	def __generateTraceEmailAddress(self, address):
		
		address = self.__cleanString(address)

		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n', \
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n', \
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[{\n', \
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:EmailAddressFacet", \n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:addressValue":"' + address +'"\n', \
			AXIOMtoJSON.C_TAB + '}\n', \
			AXIOMtoJSON.C_TAB + '] \n', \
			'}'])
		
		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True

		self.FileOut.write(line)
		return uuid


	def __generateTraceFile(self, FILEpath, FILEsize, FILEhashType, 
		FILEHashValue, FILETag, FILEtimeC, FILEtimeM, FILEtimeA, FILElocalPath, 
		FILEextension):
		
		head, tail = os.path.split(FILEpath)
		tail = tail.replace("\\", "/")
		tail = tail.replace('"', "'")
		path = FILEpath.replace('\\', '/')
		path = path.replace('"', "'")
		dotPos = tail.find('.')
		sExt = tail[dotPos:]
		
		if FILEHashValue.upper() == 'N/A':
			FILEHashValue = '0';

		if FILEhashType.upper() == '_NOT_PROVIDED_':
			FILEhashType = 'MD5';


		if  FILEsize.strip == '0':
			sizeFile = AXIOMtoJSON.C_TAB*2 + '}\n'
		else:
			sizeFile = "".join([AXIOMtoJSON.C_TAB*2 + '},\n' ,\
				AXIOMtoJSON.C_TAB*2 + '{\n',\
				AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:ContentDataFacet",\n',\
				AXIOMtoJSON.C_TAB*2 + '"uco-observable:hash":[\n',\
				AXIOMtoJSON.C_TAB*3 + '{\n',\
				AXIOMtoJSON.C_TAB*3 + '"@type":"uco-types:Hash",\n',\
				AXIOMtoJSON.C_TAB*3 + '"uco-types:hashMethod":\n',\
				AXIOMtoJSON.C_TAB*4 + '{\n',\
				AXIOMtoJSON.C_TAB*4 + '"@type": "uco-vocabulary:HashNameVocab",\n',\
				AXIOMtoJSON.C_TAB*4 + '"@value": "' + FILEhashType + '"\n',\
				AXIOMtoJSON.C_TAB*4 + '},\n',\
				AXIOMtoJSON.C_TAB*3 + '"uco-types:hashValue":\n',\
				AXIOMtoJSON.C_TAB*4 + '{\n',\
				AXIOMtoJSON.C_TAB*4 + '"@type": "xsd:hexBinary",\n',\
				AXIOMtoJSON.C_TAB*4 + '"@value":"' + FILEHashValue  + '"\n',\
				AXIOMtoJSON.C_TAB*4 + '}\n',\
				AXIOMtoJSON.C_TAB*3 + '}\n',\
				AXIOMtoJSON.C_TAB*2 + '] \n',\
			#line += AXIOMtoJSON.C_TAB*2 +  '"uco-observable:SizeInBytes":"256"\n'
				AXIOMtoJSON.C_TAB*2 + '}\n'])
			
		localPath = FILElocalPath.replace("\\", "/")

		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n', \
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject",\n', \
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:tag":["' + FILETag + '"],\n'	, \
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[\n', \
			AXIOMtoJSON.C_TAB*2 + '{\n', \
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:FileFacet",\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:fileName":"' + tail + '",\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:filePath":"' + path + '",\n', \

#--- 	the property fileLocalPath is not included in the UCO observable.TTL
#			ontology yet
#			
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:fileLocalPath":"' + localPath + '",\n', \
		
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:extension":"' + FILEextension + '",\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:fileSystemType":"userdata (ExtX)",\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:isDirectory":false,\n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:sizeInBytes": {\n',\
			AXIOMtoJSON.C_TAB*2 + '"@type":"xsd:integer", \n',\
			AXIOMtoJSON.C_TAB*2 + '"@value":"' + FILEsize + '"\n',\
			AXIOMtoJSON.C_TAB*2 + '},\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:createdTime":\n',\
			AXIOMtoJSON.C_TAB*3 + '{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:dateTime",\n',\
			AXIOMtoJSON.C_TAB*3 + '"@value":"' + FILEtimeC + '"\n',\
			AXIOMtoJSON.C_TAB*3 + '},\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:modifiedTime":\n',\
			AXIOMtoJSON.C_TAB*3 + '{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:dateTime",\n',\
			AXIOMtoJSON.C_TAB*3 + '"@value":"' + FILEtimeM + '"\n',\
			AXIOMtoJSON.C_TAB*3 + '},\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:accessedTime":\n',\
			AXIOMtoJSON.C_TAB*3 + '{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:dateTime",\n',\
			AXIOMtoJSON.C_TAB*3 + '"@value":"' + FILEtimeA + '"\n',\
			AXIOMtoJSON.C_TAB*3 + '}\n',\
			AXIOMtoJSON.C_TAB*2 + '}\n',\
			AXIOMtoJSON.C_TAB + ']\n',\
			'}'])
		
		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True 

		self.FileOut.write(line);
		return uuid

#---	FileFacet for the Chain of Evidence
#		the data are FileName, FilePath, FileExt, FileSystemType
#		In the additional property observable:comment contains the Location
#		extracted by the XML report related to the table the Trace comes from
#		
	def __generateTraceFileCoE(self, FILEpath, FILEname, FILEext, FILEsysType, 
		FILElocation):
		
		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = '{ \n'
		line += AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n'
		line += AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject",\n'
		line += AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n'
		line += AXIOMtoJSON.C_TAB + '"uco-core:tag":["Binary"],\n'
		line += AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[\n'
		line += AXIOMtoJSON.C_TAB*2 + '{\n'
		line += AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:FileFacet",\n'
		line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:fileName":"' + FILEname + '",\n'
		line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:filePath":"' + FILEpath + '",\n'
		line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:extension":"' + FILEext + '",\n'
		line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:fileSystemType":"' 
		line += FILEsysType + '",\n'
		line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:isDirectory":false,\n'
		line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:comment":"' + FILElocation + '"\n'
		# AXIOMtoJSON.C_TAB*2 + '"uco-observable:sizeInBytes": {\n',\
		# AXIOMtoJSON.C_TAB*2 + '"@type":"xsd:integer", \n',\
		# AXIOMtoJSON.C_TAB*2 + '"@value":"' + FILEsize + '"\n',\
		# AXIOMtoJSON.C_TAB*2 + '},\n',\
		line += AXIOMtoJSON.C_TAB*2 + '}\n'
		line += AXIOMtoJSON.C_TAB + ']\n'
		line += '}'
		
		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True 

		self.FileOut.write(line);
		return uuid

	def __generateTraceIdentity(self, name, familyName, birthDate):
		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n',\
			AXIOMtoJSON.C_TAB + '"@type":"uco-identity:Identity",\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[\n',\
			AXIOMtoJSON.C_TAB*2 + '{\n',\
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-identity:SimpleName",\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-identity:givenName":"' + name + '",\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-identity:familyName":"' + familyName + '"\n',\
			AXIOMtoJSON.C_TAB*2 + '},\n',\
			AXIOMtoJSON.C_TAB*2 + '{\n',\
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-identity:BirthInformation",\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-identity:birthdate":{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:dateTime",\n',\
			AXIOMtoJSON.C_TAB*3 + '"@value":"' + birthDate + '"\n',\
			AXIOMtoJSON.C_TAB*2 + '}\n',\
			AXIOMtoJSON.C_TAB + '}\n',\
			AXIOMtoJSON.C_TAB + ']\n',\
			'},\n'])
		self.FileOut.write(line);
		return uuid

	def writePhoneAccountFromContacts(self, CONTACTname, CONTACTphoneNums):
		for i in range(len(CONTACTname)):
			for j in range(len(CONTACTphoneNums[i])):
				if CONTACTphoneNums[i][j] in self.phoneNumberList:					
					pass
				else:
					self.phoneNumberList.append(CONTACTphoneNums[i][j])
					self.phoneNameList.append(CONTACTname[i])
# see previous comment of the use of the mobileOperator variable
					mobileOperator = ""
					#print('in writePhoneAccountFromContacts, num:' + CONTACTphoneNums[i][j])
					uuid = self.generateTracePhoneAccount(mobileOperator, CONTACTname[i], CONTACTphoneNums[i][j])
					self.phoneUuidList.append(uuid)

	def generateTracePhoneAccount(self, Source, Name, PhoneNum):
		
		if Source == "":
			sourceLine= ''
		else:
			sourceLine += AXIOMtoJSON.C_TAB*2 + '"uco-observable:accountIssuer":"' + Source + '", \n'

		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n',\
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n',\
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[ \n',\
			AXIOMtoJSON.C_TAB*2 + '{ \n',\
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:AccountFacet", \n',\
			sourceLine,\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:isActive":true,\n' ,\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:accountIdentifier":" "\n' ,\
			AXIOMtoJSON.C_TAB*2 + '}, \n',\
			AXIOMtoJSON.C_TAB*2 + '{ \n',\
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:PhoneAccountFacet", \n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:phoneNumber":"' + PhoneNum + '" \n',\
#	CASE 0.2/UCO 0.4 compliant, no 	uco-observable:name property in observable.ttl
#			
		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:name":"' + Name + '" \n'
			AXIOMtoJSON.C_TAB*2 + '} \n',\
			AXIOMtoJSON.C_TAB + '] \n',\
			'}'])
		
		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True 
		
		self.FileOut.write(line);
		return uuid

	def __generateTraceInvestigativeAction(self, name, description, startTime, endTime, 
		idInstrument, location, idPerformer, idObject, listResult, endChar):
		
		n = len(listResult)
		lineResult = ''
		for i in range(n - 1):
			lineResult += AXIOMtoJSON.C_TAB*3 + '{"@id":"' + listResult[i] + '"},';

		if n > 0:
			lineResult += '{"@id":"' + listResult[n - 1]  + '"}\n'
			lineResult += AXIOMtoJSON.C_TAB*2 + ']\n'
			lineResult += AXIOMtoJSON.C_TAB*2 + '}';


		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n',\
			AXIOMtoJSON.C_TAB +  '"@type":"uco-action:Action",\n',\
			AXIOMtoJSON.C_TAB +  '"uco-action:name":"' + name + '",\n',\
			AXIOMtoJSON.C_TAB + '"uco-action:description":"' + description + '",\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-action:startTime":\n',\
			AXIOMtoJSON.C_TAB*3 + '{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:dateTime",\n',\
			AXIOMtoJSON.C_TAB*3 + '"@value":"' + startTime + '"\n',\
			AXIOMtoJSON.C_TAB*3 + '},\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-action:endTime":\n',\
			AXIOMtoJSON.C_TAB*3 + '{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:dateTime",\n',\
			AXIOMtoJSON.C_TAB*3 + '"@value":"' + endTime + '"\n',\
			AXIOMtoJSON.C_TAB*3 + '},\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[\n',\
			AXIOMtoJSON.C_TAB*2 + '{\n',\
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-action:ActionReferences",\n' ,\
			AXIOMtoJSON.C_TAB*2 + '"uco-action:instrument":{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@id":"' + idInstrument + '"\n',\
			AXIOMtoJSON.C_TAB*2 + '},\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-action:location":{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@id":"' + location + '"\n',\
			AXIOMtoJSON.C_TAB*2 + '},\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-action:performer":{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@id":"' + idPerformer + '"\n',\
			AXIOMtoJSON.C_TAB*2 + '},\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-action:object":[\n',\
			AXIOMtoJSON.C_TAB*3 + '{"@id":"' + idObject + '"}\n',\
			AXIOMtoJSON.C_TAB*2 + '],\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-action:result":[\n',\
			lineResult,\
			AXIOMtoJSON.C_TAB + ']\n',\
			'}' + endChar + '\n'])
		self.FileOut.write(line);
		return uuid

	def __generateTracePhoneCall(self, direction, startTime, idFROM, idTO, 
								duration, status, outcome):

		nTime = 0
		if duration == "":
			pass
		else:
			aTime = duration.split(":")
			if len(aTime) == 3:
				nTime = aTime[0]*3600 + aTime[1]*60 + aTime[2] 
			if len(aTime) == 2:
				nTime = aTime[0]*60 + aTime[1] 
			if len(aTime) == 1:
				nTime = aTime[0] 
		duration = str(nTime)
		duration = duration.lstrip('0')
		if duration == "":
			duration = "0"

		if "Native" in self.appNameList: 
			idx = self.appNameList.index("Native")
			idAppName = self.appNameList[idx]
			idAppIdentity = self.appIDList[idx]
		else:
			idAppIdentity = self.__generateTraceAppName("Native")
			self.appNameList.append("Native")
			self.appIDList.append(idAppIdentity)

		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n',\
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n',\
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[ \n',\
			AXIOMtoJSON.C_TAB*2 + '{ \n',\
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:PhoneCallFacet", \n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:callType":"' + direction + '",\n ',\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:startTime":\n',\
			AXIOMtoJSON.C_TAB*3 + '{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:dateTime",\n',\
			AXIOMtoJSON.C_TAB*3 + '"@value":"' + startTime + '"\n',\
			AXIOMtoJSON.C_TAB*3 + '},\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:application":{ \n', \
			AXIOMtoJSON.C_TAB*3 + '"@id":"' + idAppIdentity + '" \n', \
			AXIOMtoJSON.C_TAB*2 + '}, \n', \
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:from":{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@id":"' + idFROM + '"\n',\
			AXIOMtoJSON.C_TAB*2 + '},\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:to":{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@id":"' + idTO + '"\n',\
			AXIOMtoJSON.C_TAB*2 + '},\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:duration":{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:long",\n',\
			AXIOMtoJSON.C_TAB*3 + '"@value":' + duration + '\n',\
			AXIOMtoJSON.C_TAB*3 + '},\n',\
#	CASE 0.2/UCO 0.4 compliant no uco-observable:outcome property in Observable
#		
		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:drafting:outcome":"' + outcome + '", \n'
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:allocationStatus":"' + status + '" \n',\
			AXIOMtoJSON.C_TAB*2 + '}\n' ,\
			AXIOMtoJSON.C_TAB + '] \n',\
			'} \n'])
		
		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True

		self.FileOut.write(line);
		return uuid
	

	def __generateTracePhoneOwner(self, Source, Name, PhoneNum):
		
		if self.commaLine:
			self.FileOut.write(', \n');
		else:
#---	this indicates that the next line to be writte must be preceeded by the
#			line with comma
#			
			self.commaLine = True

		if Source == "":
			lineSource = ''
		else:
			lineSource = AXIOMtoJSON.C_TAB*2 + '"uco-observable:accountIssuer":"' + Source + '", \n'
		
		self.phoneOwnerUuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' + self.phoneOwnerUuid + '", \n',\
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n',\
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[ \n',\
			AXIOMtoJSON.C_TAB*2 + '{ \n',\
			AXIOMtoJSON.C_TAB*3 + '"@type":"uco-observable:AccountFacet", \n',\
			AXIOMtoJSON.C_TAB*3 + '"uco-observable:isActive":true,\n',\
			AXIOMtoJSON.C_TAB*3 + '"uco-observable:accountIdentifier":" ",\n' ,\
			AXIOMtoJSON.C_TAB*3 + '"uco-core:name":"' + Name + '"\n' ,\
			AXIOMtoJSON.C_TAB*2 + '}, \n',\
			AXIOMtoJSON.C_TAB*2 + '{ \n',\
			AXIOMtoJSON.C_TAB*3 + '"@type":"uco-observable:PhoneAccountFacet", \n',\
			AXIOMtoJSON.C_TAB*3 + '"uco-observable:phoneNumber":"' + PhoneNum + '" \n',\
			lineSource,\
#	CASE 0.2/UCO 0.4 compliant	
#	
		#line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:name":"' + Name + '" \n'
			AXIOMtoJSON.C_TAB*2 + '} \n',\
			AXIOMtoJSON.C_TAB + ']\n',\
			'}'])
		self.FileOut.write(line);
		self.phoneNumberList.append(PhoneNum)
		self.phoneUuidList.append(self.phoneOwnerUuid)

	def __generateTraceProvencance(self, idTracesList, description, 
		exhibitNumber, creationTime):
		
		#idx = 0
		n = len(idTracesList)
		lineTraces = ''
		
		for idx in range(n - 1):
			lineTraces += AXIOMtoJSON.C_TAB*2  + '{"@id":"' + idTracesList[idx] + '"},\n'

		if n > 0:
			lineTraces += AXIOMtoJSON.C_TAB*2  + '{"@id":"' + idTracesList[n - 1] + '"}\n'

		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n',\
			AXIOMtoJSON.C_TAB + '"@type":"case-investigation:ProvenanceRecord", \n',\
			AXIOMtoJSON.C_TAB*2 + '"case-investigation:createdTime":\n',\
			AXIOMtoJSON.C_TAB*3 + '{\n',\
			AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:dateTime",\n',\
			AXIOMtoJSON.C_TAB*3 + '"@value":"' + creationTime + '"\n',\
			AXIOMtoJSON.C_TAB*3 + '},\n',\
			AXIOMtoJSON.C_TAB + '"case-investigation:description":"' + description + '",\n',\
			AXIOMtoJSON.C_TAB + '"case-investigation:exhibitNumber":"' + exhibitNumber + '",\n',\
			AXIOMtoJSON.C_TAB + '"case-investigation:object":[\n',\
			lineTraces,\
			AXIOMtoJSON.C_TAB + ']\n',\
			'},\n'])
		self.FileOut.write(line)
		return uuid


	def __generateTraceRelation(self, source, target, relation, table, offset):
		
		if not table == '':
			cleanOffset = offset.replace('@', '')
			lineTable = "".join([AXIOMtoJSON.C_TAB + '"uco-core:isDirectional":true,\n',\
				AXIOMtoJSON.C_TAB + '"uco-core:facets": [\n',\
				AXIOMtoJSON.C_TAB*2 + '{\n ',\
				AXIOMtoJSON.C_TAB*3 + '"@type":"uco-observable:DataRangeFacet",\n',\
				AXIOMtoJSON.C_TAB*2 + '"uco-observable:rangeOffset": {\n',\
				AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:integer", \n',\
				AXIOMtoJSON.C_TAB*3 + '"@value":"' + cleanOffset + '"\n',\
				AXIOMtoJSON.C_TAB*2 + '},\n',\
				AXIOMtoJSON.C_TAB*2 + '"uco-observable:rangeSize": {\n',\
				AXIOMtoJSON.C_TAB*3 + '"@type":"xsd:long", \n',\
				AXIOMtoJSON.C_TAB*3 + '"@value":"0"\n',\
				AXIOMtoJSON.C_TAB*2 + '}\n',\
				#AXIOMtoJSON.C_TAB*3 + '"uco-observable:rangeOffsetType":"',\
				#table + '"\n',\
				AXIOMtoJSON.C_TAB*2 + '}\n ',\
				AXIOMtoJSON.C_TAB + ']'])
		else:
			lineTable = AXIOMtoJSON.C_TAB + '"uco-core:isDirectional":true\n'

		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n',\
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableRelationship",\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:source":{\n',\
			AXIOMtoJSON.C_TAB*2 + '"@id":"' + source + '"\n',\
			AXIOMtoJSON.C_TAB + '},\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:target":{\n' ,\
			AXIOMtoJSON.C_TAB*2 + '"@id":"' + target + '"\n',\
			AXIOMtoJSON.C_TAB + '},\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:kindOfRelationship":{' + '\n',\
			AXIOMtoJSON.C_TAB*2 + '"@type": "uco-vocabulary:CyberItemRelationshipVocab",\n',\
			AXIOMtoJSON.C_TAB*2 + '"@value":"'		+ relation + '"\n',\
			AXIOMtoJSON.C_TAB + '},\n',\
			lineTable,\
			'}'])
		
		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True

		self.FileOut.write(line)
		return uuid

	def __generateTraceRole(self, role):
		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n',\
			AXIOMtoJSON.C_TAB + '"@type":"uco-role:Role",\n',\
			AXIOMtoJSON.C_TAB + '"uco-role:name":"' + role + '"\n',\
			'},\n'])
		self.FileOut.write(line)
		return uuid


	def __generateThreadMessages(self, chatTraceId, chatThread, chatIdAccountList):
		
		nChatThread = len(chatThread)
		lineThread  = ''
		for i in range(nChatThread - 1):
			lineThread += AXIOMtoJSON.C_TAB*3 + '{\n'
			lineThread += AXIOMtoJSON.C_TAB*4 + '"olo:index":"' + str(i + 1) + '",\n'
			lineThread += AXIOMtoJSON.C_TAB*4 + '"olo:item": {\n'
			lineThread += AXIOMtoJSON.C_TAB*5 + '"@id":"' + chatThread[i] + '"\n'
			lineThread += AXIOMtoJSON.C_TAB*4 + '}\n'
			lineThread += AXIOMtoJSON.C_TAB*3 + '},\n'

		nChatAccounts = len(chatIdAccountList)
		lineChatAccounts = ''		
		for i in range(nChatAccounts - 1):
			lineChatAccounts += AXIOMtoJSON.C_TAB*3 + '{"@id":"' + chatIdAccountList[i] + '"},\n'

		if nChatAccounts > 0:
			lineChatAccounts += AXIOMtoJSON.C_TAB*3  + '{"@id":"' + chatIdAccountList[nChatAccounts - 1] + '"}]\n' 

		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n',\
			AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n',\
			AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
			AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[\n',\
			AXIOMtoJSON.C_TAB*2 + '{\n',\
			AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:MessageThreadFacet",\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:displayName":"",\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:message":{\n',\
			AXIOMtoJSON.C_TAB*2 + '"olo:length":"' + str(len(chatThread)) + '",\n',\
			AXIOMtoJSON.C_TAB*2 + '"olo:slot":[\n',\
			lineThread,\
			AXIOMtoJSON.C_TAB*3 + '{\n',\
			AXIOMtoJSON.C_TAB*4 + '"olo:index":"' + str(nChatThread) + '",\n',\
			AXIOMtoJSON.C_TAB*4 + '"olo:item": {\n',\
			AXIOMtoJSON.C_TAB*5 + '"@id":"' + chatThread[nChatThread - 1] + '"\n',\
			AXIOMtoJSON.C_TAB*4 + '}\n',\
			AXIOMtoJSON.C_TAB*3 + '}\n',\
			AXIOMtoJSON.C_TAB*3 + ']\n',\
			AXIOMtoJSON.C_TAB*2 + '},\n',\
			AXIOMtoJSON.C_TAB*2 + '"uco-observable:participants":[\n',\
			lineChatAccounts,\
			AXIOMtoJSON.C_TAB*2 + '}\n',\
			AXIOMtoJSON.C_TAB + ']\n',\
			'}\n'])
		
		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True

		self.FileOut.write(line)
		#self.__generateChainOfEvidence(chatTraceId, uuid)
		return uuid

	def __generateTraceTool(self, name, type, vendor, version, confList):
		uuid = "kb:" + AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
			AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n',\
			AXIOMtoJSON.C_TAB + '"@type":"uco-tool:Tool", \n',\
			AXIOMtoJSON.C_TAB + '"uco-core:name":"' + name + '",\n' ,\
			AXIOMtoJSON.C_TAB + '"uco-tool:toolType":"' + type + '",\n',\
			AXIOMtoJSON.C_TAB + '"uco-tool:creator":"' + vendor + '",\n',\
			AXIOMtoJSON.C_TAB + '"uco-tool:version":"' + version + '"\n'])

		if len(confList) > 0:  
			line += line + ',\n'
			line += AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[\n'
			line += AXIOMtoJSON.C_TAB*2 + '{\n'
			line += AXIOMtoJSON.C_TAB*2 + '"@type":"uco-tool:ConfigurationSettingType",\n'
			line += AXIOMtoJSON.C_TAB*2 + '"configurationSetting":[\n'
			n = len(confList) - 1
			for i in range(n):
				listItems = []
				listItems = confList[i].split('@');
				line += AXIOMtoJSON.C_TAB*3 + '{\n'
				line += AXIOMtoJSON.C_TAB*3 + '"@type":"uco-tool:ConfigurationSettingType",\n'
				line += AXIOMtoJSON.C_TAB*3 + '"uco-tool:itemName":"' + listItems[0] + '",\n'
				line += AXIOMtoJSON.C_TAB*3 + '"uco-tool:itemValue":"' + listItems[1] + '"\n'
				line += AXIOMtoJSON.C_TAB*3 + '},\n' 
    
			listItems.clear()
			listItems += confList[n].split('@')
			line += AXIOMtoJSON.C_TAB*2 + '{\n'
			line += AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:ConfigurationSettingFacet",\n'
			line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:itemName":"' + listItems[0] + '",\n' 
			line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:itemValue":"' + listItems[1] + '"\n'
			line += AXIOMtoJSON.C_TAB*2 + '}\n'
			line += AXIOMtoJSON.C_TAB*2 + ']\n'
			line += AXIOMtoJSON.C_TAB + '}\n'
			line += AXIOMtoJSON.C_TAB + ']\n'
			line += '}\n';
		else:
			line += '}\n';

		if self.commaLine:
			self.FileOut.write(', \n')
		else:
			self.commaLine = True

		self.FileOut.write(line);
		return uuid

	def __generateTraceURL (self, URL_Value):
		
		URL_Value = self.__cleanString(URL_Value)
		if URL_Value.strip() in self.UrlList: 
					idx = self.UrlList.index(URL_Value.strip())
					uuid = self.UrlIDList[idx]
		else:
			uuid = "kb:" + AXIOMtoJSON.__createUUID()							
			self.UrlList.append(URL_Value.strip())
			self.UrlIDList.append(uuid)
		
			line = "".join(['{ \n', \
				AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n',\
				AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n',\
				AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
				AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[\n',\
				AXIOMtoJSON.C_TAB*2 + '{\n',\
				AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:URLFacet", \n',\
				AXIOMtoJSON.C_TAB*2 + '"uco-observable:fullValue":"' + URL_Value + '"\n',\
				AXIOMtoJSON.C_TAB*2 + '}\n',\
				AXIOMtoJSON.C_TAB + ']\n',\
				'}'])
			if self.commaLine:
				self.FileOut.write(', \n')
			else:
				self.commaLine = True

			self.FileOut.write(line)
		
		return uuid

	def __generateTraceWebPages(self, WEB_PAGEid, WEB_PAGEsource, WEB_PAGEurl, 
				WEB_PAGEtitle, WEB_PAGEvisitCount,  WEB_PAGElastVisited,
				WEBsource, WEBlocation, WEBrecoveryMethod):

#	CASE 0.4/UCO 0.6 compliant, new URLHistoryFacet class
#
			uuid = "kb:" + AXIOMtoJSON.__createUUID()
			
			if WEB_PAGElastVisited.strip() == '':
				WEB_PAGElastVisited = AXIOMtoJSON.C_DATE

			line = '\n{ \n'
			line += AXIOMtoJSON.C_TAB + '"@id":"' +  uuid + '", \n'
			line += AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n'
			line += AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n'
			line += AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[\n'
			line += AXIOMtoJSON.C_TAB*2 + '{\n'
			line += AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:URLHistoryFacet", \n'
			line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:browserInformation":{\n' 

			if WEB_PAGEsource.strip() in self.appNameList: 
				idx = self.appNameList.index(WEB_PAGEsource.strip())
				idAppName = self.appNameList[idx]
				idAppIdentity = self.appIDList[idx]
			else:
				idAppIdentity = self.__generateTraceAppName(WEB_PAGEsource.strip())
				self.appNameList.append(WEB_PAGEsource.strip())
				self.appIDList.append(idAppIdentity)

			line += AXIOMtoJSON.C_TAB*3 + '"@id":"' + idAppIdentity + '"\n'
			line += AXIOMtoJSON.C_TAB*2 + '},\n'

			#line += WEB_PAGEsource[i] + '", \n'
			line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:urlHistoryEntry": [\n'
			line += AXIOMtoJSON.C_TAB*2 + '{\n'
			line += AXIOMtoJSON.C_TAB*3 + '"@type":"uco-observable:URLHistoryEntry",\n'
			line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:firstVisit":\n'
			line += AXIOMtoJSON.C_TAB*4 + '{\n'
			line += AXIOMtoJSON.C_TAB*4 + '"@type":"xsd:dateTime",\n'
			line += AXIOMtoJSON.C_TAB*4 + '"@value":"1900-01-01T08:00:00+00"\n'
			line += AXIOMtoJSON.C_TAB*4 + '},\n'
			line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:lastVisit":\n'
			line += AXIOMtoJSON.C_TAB*4 + '{\n'
			line += AXIOMtoJSON.C_TAB*4 + '"@type":"xsd:dateTime",\n'
			line += AXIOMtoJSON.C_TAB*4 + '"@value":"' + WEB_PAGElastVisited + '"\n'
			line += AXIOMtoJSON.C_TAB*4 + '},\n'
			line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:expirationTime":\n'
			line += AXIOMtoJSON.C_TAB*4 + '{\n'
			line += AXIOMtoJSON.C_TAB*4 + '"@type":"xsd:dateTime",\n'
			line += AXIOMtoJSON.C_TAB*4 + '"@value":"1900-01-01T08:00:00+00"\n'
			line += AXIOMtoJSON.C_TAB*4 + '},\n'
			line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:userProfile":"",\n'
			uuidUrl = self.__generateTraceURL(WEB_PAGEurl)
			line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:url":{\n' 
			line += AXIOMtoJSON.C_TAB*4 + '"@id":"' + uuidUrl + '"\n'
			line += AXIOMtoJSON.C_TAB*3 + '},\n'
			
			uuidUrl = self.__generateTraceURL(AXIOMtoJSON.C_REF_URL)
			line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:referrerUrl":{\n'			
			line += AXIOMtoJSON.C_TAB*4 + '"@id":"' + uuidUrl + '"\n'
			line += AXIOMtoJSON.C_TAB*3 + '},\n'
			line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:pageTitle":"' 
			title = WEB_PAGEtitle.replace('"', '')
			line += title + '",\n'
			line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:visitCount":' 
			if WEB_PAGEvisitCount.strip() == '':
				line += '0,\n' 
			else:
				line += WEB_PAGEvisitCount + ',\n' 
			line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:manuallyEnteredCount":{\n'
			line += AXIOMtoJSON.C_TAB*4 + '"@type":"xsd:nonNegativeInteger",\n'
			line += AXIOMtoJSON.C_TAB*4 + '"@value":"0"\n'
			line += AXIOMtoJSON.C_TAB*4 + '},\n'
			line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:keywordSearchTerm":"NULL"\n'
			#line += AXIOMtoJSON.C_TAB*3 + '"uco-observable:allocationStatus":"' 
			#line += WEB_PAGEstatus[i] + '"\n'			
			line += AXIOMtoJSON.C_TAB*3 + '}\n'
			line += AXIOMtoJSON.C_TAB*2 + ']\n'  						
			line += AXIOMtoJSON.C_TAB + '}\n'  					
			line += AXIOMtoJSON.C_TAB + ']\n'  						
			line += '}'   						
			
			if self.commaLine:
				self.FileOut.write(', \n')
			else:
				self.commaLine = True

			self.FileOut.write(line);
			
			self.__generateChainOfEvidence(WEBsource, WEBlocation, uuid)


	#not used anymore, every time the field Source is extracted
	# an uco-observable:Application item is created
	def storeUserAccount(self, U_ACCOUNTsource, U_ACCOUNTname,
			U_ACCOUNTusername):
		for i in range(len(U_ACCOUNTsource)):
			idAppName = self.__generateTraceAppName(U_ACCOUNTsource[i])
			self.appNameList.append(U_ACCOUNTsource[i])
			#self.appAccountNameList.append(U_ACCOUNTname[i])
			#self.appAccountUsernameList.append(U_ACCOUNTusername[i])
			self.appIDList.append(idAppName)

	def writeCall(self, CALLid, CALLappName, CALLtimeStamp, CALLdirection, 
				CALLduration, CALLpartner, CALLsource, CALLlocation, CALLrecoveryMethod):
		
		#print("len(CALLid)=" + str(len(CALLid)) + ', len(CALLpartner)=' + str(len(CALLpartner)))			
		callOutcome = ''
		
		for i in range(len(CALLid)):
			if CALLdirection[i].lower() == 'incoming':
					phoneTO = self.phoneOwnerNumber
					phoneFROM = CALLpartner[i]
			else:
				phoneTO = CALLpartner[i]
				phoneFROM = self.phoneOwnerNumber

			phonePattern = '\+?[0-9]+'	# phone number pattern
			resPattern = re.match(phonePattern, CALLpartner[i])
			
			if (resPattern):
				if CALLpartner[i] in self.phoneNumberList:
					idx = self.phoneNumberList.index(idParty)
					uuidPartner = self.phoneUuidList[idx]
				else:	
					mobileOperator = ""
					phoneName = ''
					uuidPartner = self.generateTracePhoneAccount(mobileOperator, 
						phoneName, CALLpartner[i])			
			else:
				#print("CALLappName[" + str(i) + "] = " +  CALLappName[i].strip())
				if CALLappName[i].strip() in self.appNameList: 
					idx = self.appNameList.index(CALLappName[i].strip())
					idAppName = self.appNameList[idx]
					idAppIdentity = self.appIDList[idx]
				else:
					idAppIdentity = self.__generateTraceAppName(CALLappName[i].strip())
					self.appNameList.append(CALLappName[i].strip())
					self.appIDList.append(idAppIdentity)

				if CALLpartner[i].strip() in self.CHATparticipantsIdList: 
					idx = self.CHATparticipantsIdList.index(CALLpartner[i].strip())
					uuidPartner = self.CHATaccountIdList[idx]
				else:
					self.CHATparticipantsNameList.append(CALLpartner[i].strip())
					uuidPartner = self.__generateTraceChatAccount(CALLsource[i].strip(),
						CALLpartner[i].strip(), CALLpartner[i].strip(), idAppIdentity)
					self.CHATparticipantsIdList.append(CALLpartner[i].strip())
					self.CHATaccountIdList.append(uuidPartner)						

			if CALLdirection[i].lower() == 'incoming':
				uuid = self.__generateTracePhoneCall(CALLdirection[i].lower(), 
					CALLtimeStamp[i], uuidPartner, self.phoneOwnerUuid, CALLduration[i],
                           CALLrecoveryMethod[i], callOutcome)
			else:
				uuid = self.__generateTracePhoneCall(CALLdirection[i].lower(), 
					CALLtimeStamp[i], self.phoneOwnerUuid, uuidPartner, CALLduration[i],
                           CALLrecoveryMethod[i], callOutcome)
			
			self.__generateChainOfEvidence(CALLsource[i], CALLlocation[i], uuid)

	def ObservableRelationship(self, CONTACTname, CONTACTphoneNum,
				CONTACTsource, CONTACTlocation, CONTACTrecoveryMethod):
		for i in range(len(CONTACTname)):
			if CONTACTphoneNum[i] == 'EMPTY':
				continue
			else:
				phoneNum = CONTACTphoneNum[i].replace('+', '00')
				phoneNum = phoneNum.replace(' ', '')
				if phoneNum in self.phoneNumberList:					
						pass
				else:
					self.phoneNumberList.append(phoneNum)
					self.phoneNameList.append(CONTACTname[i])
					mobileOperator = ""
					uuid = self.generateTracePhoneAccount(mobileOperator, CONTACTname[i], phoneNum)
					self.phoneUuidList.append(uuid)

	def writeHeader(self):
		uuid = AXIOMtoJSON.__createUUID()
		line = "".join(['{ \n', \
				AXIOMtoJSON.C_TAB + '"@context": { \n', \
				AXIOMtoJSON.C_TAB*2 + '"@vocab": "http://caseontology.org/core#", \n', \
				AXIOMtoJSON.C_TAB*2 + '"case-investigation": "https://caseontology.org/ontology/case/investigation#", \n', \
				AXIOMtoJSON.C_TAB*2 + '"rdf":"http://www.w3.org/1999/02/22-rdf-syntax-ns#", \n', \
				AXIOMtoJSON.C_TAB*2 + '"rdfs":"http://www.w3.org/2000/01/rdf-schema#", \n', \
				AXIOMtoJSON.C_TAB*2 + '"uco-action": "https://unifiedcyberontology.org/ontology/uco/action#", \n', \
				AXIOMtoJSON.C_TAB*2 + '"uco-core": "https://unifiedcyberontology.org/ontology/uco/core#", \n', \
				AXIOMtoJSON.C_TAB*2 + '"uco-identity": "https://unifiedcyberontology.org/ontology/uco/identity#",\n', \
				AXIOMtoJSON.C_TAB*2 + '"uco-role": "https://unifiedcyberontology.org/ontology/uco/role#",\n', \
				AXIOMtoJSON.C_TAB*2 + '"uco-location": "https://unifiedcyberontology.org/ontology/uco/location#",\n', \
				AXIOMtoJSON.C_TAB*2 + '"uco-observable": "https://unifiedcyberontology.org/ontology/uco/observable#", \n', \
				AXIOMtoJSON.C_TAB*2 + '"uco-tool": "https://unifiedcyberontology.org/ontology/uco/tool#", \n', \
				AXIOMtoJSON.C_TAB*2 + '"uco-types": "https://unifiedcyberontology.org/ontology/uco/types#", \n', \
				AXIOMtoJSON.C_TAB*2 + '"uco-vocabulary": "https://unifiedcyberontology.org/ontology/uco/vocabulary#", \n', \
				AXIOMtoJSON.C_TAB*2 + '"xsd":"http://www.w3.org/2001/XMLSchema#" \n', \
				AXIOMtoJSON.C_TAB*2 + '},\n', \
				'"@id": ":bundle-' + uuid + '", \n', \
				'"@type": "uco-core:Bundle",\n', \
				'"uco-core:specVersion": "CASE 0.3 - UCO 0.5",\n', \
				'"uco-core:description": "Extraction from XML report generated by MAGNET AXIOM PROCESS",\n', \
				'"uco-core:object": [\n'])
		self.FileOut.write(line)

	def writeLastLine(self):
		self.__generateLastLine()

	def writePhoneOwner(self, phoneOwnerNumber, phoneOwnerName):
		self.phoneOwnerNumber = phoneOwnerNumber
#	see previous comment of the use of the mobileOperator variable
#	the mobileOwnerName is not available in the XML report		
		mobileOperator = ""
		self.__generateTracePhoneOwner(mobileOperator, phoneOwnerName, 
				phoneOwnerNumber)


	def writeFiles(self, FILEid, FILEtag, FILEname, FILElocalPath, FILEimage,
					FILEsize, FILEcreated, FILEmodified, FILEaccessed, FILEmd5,
					FILEsource, FILElocation, FILErecoveryMethod):
			
			for i in range(len(FILEid)):			
				if FILEname[i] == 'EMPTY':
					FILEname[i] = FILEimage[i]
					
				fileExt = FILEname[i][FILEname[i].rfind('.') + 1:]

				uuid = self.__generateTraceFile(FILEname[i], FILEsize[i], 
					'MD5', FILEmd5[i],	FILEtag[i], FILEcreated[i], FILEmodified[i], 
					FILEaccessed[i], FILElocalPath[i], fileExt)

				self.FILEuuid[FILEid[i]] = uuid

	def writeChat(self, CHATid, CHATsender, CHATreceiver, CHATdateTimeSent, 
							CHATdateTimeReceived, CHATmessage, CHATmessageStatus, 
							CHATapplication, CHATsource, CHATlocation, CHATrecoveryMethod):		

		# print("len(CHATapplication)=" + str(len(CHATapplication)) )
		# print(CHATapplication[len(CHATapplication) - 1])
		# print("len(CHATid)=" + str(len(CHATid)) )
		# print(CHATid[len(CHATid) - 1])
		CHATthreadParticipants = []
		self.fillChatThread(CHATthreadParticipants, CHATid, CHATsender, CHATreceiver,
				CHATdateTimeSent, CHATdateTimeReceived, CHATmessage, CHATmessageStatus,
				CHATapplication, CHATsource, CHATlocation, CHATrecoveryMethod, 
				self.phoneOwnerNumber)			

		for i in range(len(self.CHATids)):
#---	CHATidAccountList contains the list of the Mesages uuid of CHATs
#			CHATthread contains the values for the generation of the 
#			ChatThreadFacet Observable	
#								
			self.CHATthread = []	
			self.chatIdAccountList = []			
			for j in range(len(self.CHATids[i])):
				if self.CHATapplications[i][j].strip().lower() in self.appNameList: 
					idx = self.appNameList.index(self.CHATapplications[i][j].strip().lower())
					idAppName = self.appNameList[idx]
					idAppIdentity = self.appIDList[idx]
				else:
					idAppIdentity = self.__generateTraceAppName(self.CHATapplications[i][j].strip().lower())
					self.appNameList.append(self.CHATapplications[i][j].strip().lower())
					self.appIDList.append(idAppIdentity)
				
				if self.CHATsenders[i][j].strip() in self.CHATparticipantsIdList: 
					idx = self.CHATparticipantsIdList.index(self.CHATsenders[i][j].strip())
					CHATmsgFrom = self.CHATaccountIdList[idx]
				else:
					CHATname = ''
					self.CHATparticipantsNameList.append(CHATname)
					CHATmsgFrom = self.__generateTraceChatAccount(self.CHATapplications[i][j].strip(),
						self.CHATsenders[i][j].strip(), CHATname, idAppIdentity)
					self.CHATparticipantsIdList.append(self.CHATsenders[i][j].strip())
					self.CHATaccountIdList.append(CHATmsgFrom)

				if self.CHATreceivers[i][j].strip() in self.CHATparticipantsIdList: 
					idx = self.CHATparticipantsIdList.index(self.CHATreceivers[i][j].strip())
					CHATmsgTo = self.CHATaccountIdList[idx]
				else:
					CHATname = ''
					self.CHATparticipantsNameList.append(CHATname)
					CHATmsgTo = self.__generateTraceChatAccount(self.CHATapplications[i][j].strip(),
						self.CHATreceivers[i][j].strip(), CHATname, idAppIdentity)
					self.CHATparticipantsIdList.append(self.CHATreceivers[i][j].strip())
					self.CHATaccountIdList.append(CHATmsgTo)
				

# if Identifiers TO is empty, the array CHATpartyIdentifiers must
# be iterated to find the right Party
				
				if self.CHATmessageStatuses[i][j].lower().find('received') > - 1:
					CHATdirection = 'Incoming'
					CHATdate = self.CHATdateTimeReceiveds[i][j] 
				else:			
					CHATdirection = 'Outgoing'
					CHATdate = self.CHATdateTimeSents[i][j]
								
				CHATattachmentFileNames = ''
				CHATattachmentUrls = ''
				#print('before __generateTraceChat, FROM: ' + CHATmsgFrom +
				#	', TO: ' + CHATmsgTo)

				chatUuid = self.__generateTraceChat(self.CHATmessages[i][j], idAppIdentity, 
					CHATdate, CHATmsgFrom, CHATmsgTo, self.CHATrecoveryMethods[i][j], 
					self.CHATmessageStatuses[i][j], CHATdirection, CHATattachmentFileNames,
					CHATattachmentUrls)
				self.CHATthread.append(chatUuid)

#---	if there are not messages for this Chat or no ChatAccount has been
# 		generated, the ThreadMessage is not generated. Moreover the Chain of
# 		evidence is built upon the ThreadUuid
#				
			if (len(self.CHATthread) == 0):
				pass
			else:
				uuidThread = self.__generateThreadMessages(self.CHATids[i][j], self.CHATthread, 
								[CHATmsgFrom, CHATmsgTo])
				self.__generateChainOfEvidence(CHATsource[i], CHATlocation[i], chatUuid)

	def writeEmail(self, EMAILid, EMAILapp, EMAILidentifierFROM, 
				EMAILidentifiersTO, EMAILidentifiersCC, EMAILidentifiersBCC, 
                EMAILbody, EMAILsubject, EMAILtimeStamp, EMAILattachmentsFilename,
                EMAILsource, EMAILlocation, EMAILrecoveryMethod):
		
		for i in range(len(EMAILid)):			
			self.__generateTraceEmail(EMAILid[i], EMAILrecoveryMethod[i], EMAILsource[i],
				EMAILlocation[i], EMAILidentifierFROM[i], EMAILidentifiersTO[i], 
				EMAILidentifiersCC[i], EMAILidentifiersBCC[i], EMAILbody[i], 
				EMAILsubject[i], EMAILtimeStamp[i], EMAILattachmentsFilename[i])


	def writeWebPages(self, WEB_PAGEid, WEB_PAGEsource, WEB_PAGEurl, 
				WEB_PAGEtitle, WEB_PAGEvisitCount,  WEB_PAGlastVisited, 
				WEBsource, WEBlocation, WEBrecoveryMethod):
		for i in range(len(WEB_PAGEid) - 1):
			self.__generateTraceWebPages(WEB_PAGEid[i], WEB_PAGEsource[i], WEB_PAGEurl[i], 
					WEB_PAGEtitle[i], WEB_PAGEvisitCount[i],  WEB_PAGlastVisited[i],
					WEBsource[i], WEBlocation[i], WEBrecoveryMethod[i])

#--- last char is space not comma when i == len(WEB_PAGEid)
#			
		if len(WEB_PAGEid) > 0:
			self.__generateTraceWebPages(WEB_PAGEid[i], WEB_PAGEsource[i], WEB_PAGEurl[i], 
					WEB_PAGEtitle[i], WEB_PAGEvisitCount[i],  WEB_PAGlastVisited[i],
					WEBsource[i], WEBlocation[i], WEBrecoveryMethod[i])

	
	def writeSms(self, SMSid, SMSsender, SMSrecipient, SMSreceivedDateTime,
					SMSsentDateTime, SMSmessage, SMSdirection, SMSsource,
					SMSlocation, SMSrecoveryMethod):

		for i in range(len(SMSid)):			
			phoneUuidTo = ''
			phoneUuidFrom = ''
			SMSsenderClean = SMSsender[i].strip()
			if SMSsenderClean.lower() == 'local user':
				SMSsenderClean = self.phoneOwnerNumber


#---	get rid of hex chars byte not accepted in JSON values
#			
			#SMSsenderClean = '?'.join(hex(ord(x))[2:] for x in SMSsenderClean)
			if SMSsenderClean in self.phoneNumberList:						
				idx = self.phoneNumberList.index(SMSsenderClean)						
				userId = self.phoneNumberList[idx]
				phoneParticipantUuid = self.phoneUuidList[idx]
			else:
				senderName = ''
				self.phoneNumberList.append(SMSsenderClean)
				self.phoneNameList.append(senderName)
				mobileOperator = ""		
				SMSsenderClean = self.__cleanString(SMSsenderClean)
				phoneParticipantUuid = self.generateTracePhoneAccount(mobileOperator, 
					senderName, SMSsenderClean)	
				self.phoneUuidList.append(phoneParticipantUuid)

			SMSrecipientClean = SMSrecipient[i].strip()
			if SMSrecipientClean.lower() == 'local user':
				SMSrecipientClean = self.phoneOwnerNumber

			#SMSrecipientClean = '?'.join(hex(ord(x))[2:] for x in SMSrecipientClean)
			if SMSrecipientClean in self.phoneNumberList:						
				idx = self.phoneNumberList.index(SMSrecipientClean)						
				userId = self.phoneNumberList[idx]
				phoneRecipientUuid = self.phoneUuidList[idx]
			else:
				recipientName = ''
				self.phoneNumberList.append(SMSrecipientClean)
				self.phoneNameList.append(recipientName)
				mobileOperator = ""
				SMSrecipientClean = self.__cleanString(SMSrecipientClean)
				phoneRecipientUuid = self.generateTracePhoneAccount(mobileOperator, 
					recipientName, SMSrecipientClean)	
				self.phoneUuidList.append(phoneRecipientUuid)


			body = SMSmessage[i].replace('\n', ' ')
			body = body.replace('"', "'")
			body = body.replace('\t', ' ')
			body = body.replace("\\'", "'")
			body = body.replace("\\", "")
			#body = '?'.join(hex(ord(x))[2:] for x in body)

			if SMSreceivedDateTime[i] == 'EMPTY':
				phoneUuidFrom = phoneParticipantUuid
				phoneUuidTo = '{"@id":"' + phoneRecipientUuid + '"}'	
				SMSdate = SMSsentDateTime[i]
			else:
				phoneUuidFrom = phoneRecipientUuid
				phoneUuidTo = '{"@id":"' + phoneParticipantUuid + '"}'	
				SMSdate = SMSreceivedDateTime[i]


			uuid = "kb:" + AXIOMtoJSON.__createUUID()
			line = "".join(['{ \n', \
				AXIOMtoJSON.C_TAB + '"@id":"' + uuid + '", \n',\
				AXIOMtoJSON.C_TAB + '"@type":"uco-observable:ObservableObject", \n',\
				AXIOMtoJSON.C_TAB + '"uco-observable:hasChanged":true,\n',\
				AXIOMtoJSON.C_TAB + '"uco-core:hasFacet":[ \n',\
				AXIOMtoJSON.C_TAB*2 + '{ \n',\
				AXIOMtoJSON.C_TAB*2 + '"@type":"uco-observable:MessageFacet", \n' ,\

#---	CASE 0.2/UCO 0.4 compliant,  uco-observable:SMSMessage is a class, not clear its possible
#			values
#				line += AXIOMtoJSON.C_TAB*2 + '"uco-observable:SMSmessage":"true", \n'
#				
				AXIOMtoJSON.C_TAB*2 + '"uco-observable:messageText":"' + body + '", \n',\
				AXIOMtoJSON.C_TAB*2 + '"uco-observable:allocationStatus":"' + SMSrecoveryMethod[i] + '", \n',\
				AXIOMtoJSON.C_TAB*2 + '"uco-observable:from":{\n',\
				AXIOMtoJSON.C_TAB*3 + '"@id":"' + phoneUuidFrom + '"\n',\
				AXIOMtoJSON.C_TAB*2 + '},\n',\
				AXIOMtoJSON.C_TAB*2 + '"uco-observable:to":[' + phoneUuidTo + '], \n',\
				AXIOMtoJSON.C_TAB*2 + '"uco-observable:sentTime":{\n',\
				AXIOMtoJSON.C_TAB*3 + '"@type": "xsd:dateTime", \n' ,\
				AXIOMtoJSON.C_TAB*3 + ' "@value": "' + SMSdate + '"\n',\
				AXIOMtoJSON.C_TAB*3 + '} \n'	,\
				AXIOMtoJSON.C_TAB*2 + '} \n',\
				AXIOMtoJSON.C_TAB + '] \n',\
				'}'])
			
			if self.commaLine:
				self.FileOut.write(', \n')
			else:
				self.commaLine = True
			
			self.FileOut.write(line)
			self.__generateChainOfEvidence(SMSsource[i], SMSlocation[i], uuid)

	def writeContextAxiom(self, axiomVersionText, deviceExtractionStartTime, 
		deviceAcquisitionStartTime, deviceAcquisitionEndTime, examinerNameText,
		deviceBluetoothAddressText, deviceIdText, deviceModelText, 
		deviceOsTypeText, deviceOsVersionText, deviceVendorText, 
		deviceMacAddressText, deviceIccidText, deviceImsiText, 
		deviceImeiText, imagePath, imageSize, 
		imageMetadataHashSHA, imageMetadataHashMD5):

		self.___generateContextAxiom(ufedVersionText, deviceExtractionStartTime, 
			deviceAcquisitionStartTime, deviceAcquisitionEndTime, examinerNameText, 
			deviceBluetoothAddressText, deviceIdText, devicePhoneModelText, 
			deviceOsTypeText, deviceOsVersionText, devicePhoneVendorText, 
			deviceMacAddressText, deviceIccidText, deviceImsiText, 
			deviceImeiText, imagePath, imageSize, 
			imageMetadataHashSHA, imageMetadataHashMD5)


